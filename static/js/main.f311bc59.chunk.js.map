{"version":3,"sources":["components/NutrientList.js","components/NutrientProcessor.js","App.js","serviceWorker.js","index.js"],"names":["NutrientList","nutrientList","NUTRIENTS_NAME","backgroundColors","nutrients","foodNutrients","NUTRIENTS_ID","mod","nutrientDict","forEach","name","n","includes","nutrientId","index","indexOf","parseFloat","value","unitName","toLowerCase","gatherNutrientData","className","colSpan","map","k","idx","nutrientValue","toString","split","key","style","background","paddingLeft","App","useState","query","setQuery","data","setData","url","trim","search","e","target","id","fetch","then","res","json","rej","console","log","responseText","d","document","querySelector","scrollTo","top","querySelectorAll","item","classList","add","foods","type","label","onChange","placeholder","onKeyPress","onClick","Object","keys","length","textAlign","textShadow","fontSize","currentTarget","toggle","description","brandOwner","String","fromCharCode","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","getElementById","URL","process","href","origin","addEventListener","headers","response","contentType","get","status","ready","unregister","reload","checkValidServiceWorker"],"mappings":"kJAqEeA,MAlEf,YAAyC,IAAjBC,EAAgB,EAAhBA,aAEhBC,EAAiB,CACrB,SAAU,UAAW,WAAY,WACjC,YAAa,OAAQ,QAAS,UAQ1BC,EAAmB,CACvB,YAAa,YAAa,YAAa,YACvC,YAAa,YAAa,YAAa,aAErCC,EClBqB,SAAUC,EAAeH,EAAgBI,GAA6B,IAAfC,EAAc,uDAAR,OAClFC,EAAe,GAmBnB,OAjBAN,EAAeO,SAAQ,SAAAC,GACrBF,EAAaE,GAAQ,KAIvBL,EAAcI,SAAQ,SAAAE,GACpB,GAAIL,EAAaM,SAASD,EAAEE,YAAa,CACvC,IAAIC,EAAQR,EAAaS,QAAQJ,EAAEE,YACnCL,EAAaN,EAAeY,IAAUE,WAAWL,EAAEM,OACvC,SAARV,IACFC,EAAaN,EAAeY,KAA5B,WACMH,EAAEO,SAASC,oBAMhBX,EDFSY,CAAmBnB,EAAcC,EAT5B,CACnB,KAAM,KAAM,KAAM,KAClB,KAAM,KAAM,IAAM,MAO2D,QAE/E,OACE,yBAAKmB,UAAU,6BACb,+BACE,+BACE,4BACE,wBAAIC,QAAQ,KAAZ,uBAGDpB,EAAeqB,KAAI,SAACC,EAAGC,GAEtB,IAAIC,EAAgBV,WAAWZ,EAAUoB,GAAGG,WAAWC,MAAM,MAa7D,MALU,WAANJ,EACFE,GAAiB,IACJ,WAANF,IACPE,GAAiB,GAGjB,wBAAIG,IAAKJ,GACP,4BAEE,yBAAKK,MAAO,CACVC,WAAW,gFAAD,OAGJ5B,EAAiBsB,GAHb,YAGqBC,EAHrB,mDAIQA,EAJR,6CAMVM,YAAa,QAEZR,IAGL,4BAAKpB,EAAUoB,IAAM,eE6BtBS,MAnFf,WAAgB,IAAD,EACaC,mBAAS,IADtB,mBACNC,EADM,KACCC,EADD,OAEWF,mBAAS,IAFpB,mBAENG,EAFM,KAEAC,EAFA,KAKPC,EAAG,6DAAyDJ,EAAMK,OAA/D,oBADG,2CACH,qBAFQ,IAKjB,SAASC,EAAOC,GACO,KAAjBP,EAAMK,SACI,UAAVE,EAAEb,KAAiC,cAAda,EAAEC,OAAOC,KAChCC,MAAMN,GACHO,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAAQ,SAAAC,GACvBC,QAAQC,IAAIF,EAAIG,mBAEjBN,MAAK,SAAAO,GACJC,SAASC,cAAc,aAAaC,SAAS,CAAEC,IAAK,IACpDH,SAASI,iBAAiB,yBAAyBjD,SAAQ,SAAAkD,GAAI,OAAIA,EAAKC,UAAUC,IAAI,WACtFvB,EAAQe,EAAES,OACVZ,QAAQC,IAAI,qBAAsBE,EAAES,OACpC1B,EAAS,OAGbc,QAAQC,IAAIhB,KAGhB,OAEE,yBAAKd,UAAU,uBACX,0BAAMA,UAAU,OACd,yBAAKA,UAAU,gDACb,2BACE0C,KAAK,OACLnB,GAAG,QACHoB,MAAM,QACN/C,MAAOkB,EACP8B,SAAU,SAAAvB,GAAC,OAAIN,EAASM,EAAEC,OAAO1B,QACjCiD,YAAY,iBACZC,WAAY1B,IAEd,4BAAQG,GAAG,YAAYwB,QAAS3B,GAAhC,WACF,yBAAKpB,UAAU,iDACb,yBAAKA,UAAU,YACb,wBAAIA,UAAU,aACmB,IAA7BgD,OAAOC,KAAKjC,GAAMkC,OAClB,6BAASzC,MAAO,CAAE0C,UAAW,SAAUC,WAAY,sBAAuB,6CACxE,uBAAG3C,MAAO,CACR4C,SAAU,UADZ,6JAWFrC,EAAKd,KAAI,SAAC8B,EAAG5B,GACX,OACE,wBAAII,IAAKJ,EAAKJ,UAAU,kBAAkB+C,QAAS,SAAC1B,GAClDA,EAAEiC,cAAcpB,cAAc,yBAAyBK,UAAUgB,OAAO,UAExE,yBAAKvD,UAAU,wBACb,6BAAMgC,EAAEwB,YAAY1D,eACpB,2BAAIkC,EAAEyB,YAAc,KAEtB,kBAAC,EAAD,CACE7E,aAAcoD,EAAEhD,wBAQlC,4BAAQgB,UAAU,OAChB,uBAAGA,UAAU,UAAU0D,OAAOC,aAAa,KAA3C,4BCtEJC,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAiBC,EAAOC,GAC/BC,UAAUC,cACPC,SAASJ,GACT1C,MAAK,SAAA+C,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfR,UAAUC,cAAcQ,YAI1BjD,QAAQC,IACN,iHAKEsC,GAAUA,EAAOW,UACnBX,EAAOW,SAASP,KAMlB3C,QAAQC,IAAI,sCAGRsC,GAAUA,EAAOY,WACnBZ,EAAOY,UAAUR,WAO5BS,OAAM,SAAAC,GACLrD,QAAQqD,MAAM,4CAA6CA,MC3FjEC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFpD,SAASqD,eAAe,SDanB,SAAmBlB,GACxB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIkB,IAAIC,iBAAwB1B,OAAOC,SAAS0B,MACpDC,SAAW5B,OAAOC,SAAS2B,OAIvC,OAGF5B,OAAO6B,iBAAiB,QAAQ,WAC9B,IAAMxB,EAAK,UAAMqB,iBAAN,sBAEP5B,IAgEV,SAAkCO,EAAOC,GAEvC5C,MAAM2C,EAAO,CACXyB,QAAS,CAAE,iBAAkB,YAE5BnE,MAAK,SAAAoE,GAEJ,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBAEnB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYpG,QAAQ,cAG5C2E,UAAUC,cAAc2B,MAAMxE,MAAK,SAAA+C,GACjCA,EAAa0B,aAAazE,MAAK,WAC7BqC,OAAOC,SAASoC,eAKpBjC,EAAgBC,EAAOC,MAG1Ba,OAAM,WACLpD,QAAQC,IACN,oEAvFAsE,CAAwBjC,EAAOC,GAI/BC,UAAUC,cAAc2B,MAAMxE,MAAK,WACjCI,QAAQC,IACN,iHAMJoC,EAAgBC,EAAOC,OCnC/BE,I","file":"static/js/main.f311bc59.chunk.js","sourcesContent":["import React from 'react';\r\nimport { gatherNutrientData } from './NutrientProcessor'\r\n\r\nfunction NutrientList({ nutrientList }) {\r\n  // Title of each nutrients\r\n  const NUTRIENTS_NAME = [\r\n    'Energy', 'Protein', 'Tot. fat', 'Sat. fat',\r\n    'Tran. fat', 'Carb', 'Sugar', 'Sodium']\r\n\r\n  // Id of each nutrients (according to usda)\r\n  const NUTRIENTS_ID = [\r\n    1008, 1003, 1004, 1258,\r\n    1257, 1005, 2000, 1093]\r\n\r\n  // Colors for the background bar\r\n  const backgroundColors = [\r\n    \"#FF8811bb\", \"#70CBFFbb\", \"#A82431bb\", \"#FF8C42bb\",\r\n    \"#FCF6BDbb\", \"#FF90B3bb\", \"#FF4782bb\", \"#C7BDC0bb\"]\r\n\r\n  let nutrients = gatherNutrientData(nutrientList, NUTRIENTS_NAME, NUTRIENTS_ID, \"list\")\r\n\r\n  return (\r\n    <div className=\"data-list__item-info fold\">\r\n      <table>\r\n        <tbody>\r\n          <tr>\r\n            <th colSpan=\"2\">per serving (100g)</th>\r\n          </tr>\r\n\r\n          {NUTRIENTS_NAME.map((k, idx) => {\r\n            // Get numeric value of the nutrient\r\n            let nutrientValue = parseFloat(nutrients[k].toString().split(\" \"))\r\n\r\n            // Calculating percentage according to weight.\r\n            //  100g per servings, so no need to divide by weight.\r\n            //\r\n            // * Sodium is in units of mg, so divide by 1000,\r\n            // * Energy is divided by the maximum energy possible :\r\n            //   --> (100g * 9kcal/g = 900kcal)\r\n            if (k === \"Sodium\")\r\n              nutrientValue /= 1000\r\n            else if (k === \"Energy\")\r\n              nutrientValue /= 9\r\n\r\n            return (\r\n              <tr key={idx}>\r\n                <td>\r\n                  {/* Add background color according to the percentage */}\r\n                  <div style={{\r\n                    background:\r\n                      `linear-gradient(\r\n                        to left, \r\n                        ${backgroundColors[idx]} ${nutrientValue}%,\r\n                        transparent ${nutrientValue}%, \r\n                        transparent)`,\r\n                    paddingLeft: \"5px\"\r\n                  }} >\r\n                    {k}\r\n                  </div>\r\n                </td>\r\n                <td>{nutrients[k] || \"0 g\"}</td>\r\n              </tr>\r\n            )\r\n          })}\r\n        </tbody>\r\n      </table></div>\r\n  )\r\n}\r\n\r\nexport default NutrientList;","\r\nconst gatherNutrientData = function (foodNutrients, NUTRIENTS_NAME, NUTRIENTS_ID, mod = \"list\") {\r\n  let nutrientDict = {}\r\n  // initialize dictionary\r\n  NUTRIENTS_NAME.forEach(name => {\r\n    nutrientDict[name] = 0;\r\n  })\r\n\r\n  // gather data to dictionary\r\n  foodNutrients.forEach(n => {\r\n    if (NUTRIENTS_ID.includes(n.nutrientId)) {\r\n      let index = NUTRIENTS_ID.indexOf(n.nutrientId);\r\n      nutrientDict[NUTRIENTS_NAME[index]] = parseFloat(n.value)\r\n      if (mod === \"list\")\r\n        nutrientDict[NUTRIENTS_NAME[index]] +=\r\n          ` ${n.unitName.toLowerCase()}`\r\n    }\r\n  });\r\n\r\n  // console.log(\"nutrientDict:\\n\", nutrientDict)\r\n  // console.log('called')\r\n  return nutrientDict;\r\n};\r\n\r\nexport { gatherNutrientData };","import React, { useState } from 'react';\nimport './css/App.css'\nimport NutrientList from './components/NutrientList'\n// import NutrientChart from './components/NutrientChart'\n\n\nfunction App() {\n  const [query, setQuery] = useState(\"\")\n  const [data, setData] = useState([])\n  const pageSize = 10\n  const key = \"0SZt1LrnaarcT0ZcxTZ662ELwczfBaaxXSmU5PS7\"\n  const url = `https://api.nal.usda.gov/fdc/v1/foods/search?query=${query.trim()}&api_key=${key}&pageSize=${pageSize}`\n\n\n  function search(e) {\n    if (query.trim() === \"\") return \n    if (e.key === \"Enter\" || e.target.id===\"query-btn\") {\n      fetch(url)\n        .then(res => res.json(), rej => {\n          console.log(rej.responseText())\n        })\n        .then(d => {\n          document.querySelector('.data-box').scrollTo({ top: 0 })\n          document.querySelectorAll(\".data-list__item-info\").forEach(item => item.classList.add('fold'))\n          setData(d.foods)\n          console.log(\"data from fetch:\\n\", d.foods)\n          setQuery(\"\")\n\n        })\n      console.log(query)\n    }\n  }\n  return (\n\n    <div className='App container-fluid'>\n        <main className=\"row\">\n          <div className=\"query-box col-lg-6 col-md-8 col-sm-10 col-12\">\n            <input\n              type=\"text\"\n              id=\"query\"\n              label=\"query\"\n              value={query}\n              onChange={e => setQuery(e.target.value)}\n              placeholder=\"Search food...\"\n              onKeyPress={search}\n            />\n            <button id=\"query-btn\" onClick={search}>Search</button></div>\n          <div className=\"output-box col-lg-6 col-md-8 col-sm-10 col-12\">\n            <div className=\"data-box\">\n              <ul className=\"data-list\">\n                {(Object.keys(data).length === 0) ?\n                  <section style={{ textAlign: \"center\", textShadow: \"1px 1px 2px black\" }}><h2>Food Searcher</h2>\n                    <p style={{\n                      fontSize: \"1.2em\"\n                    }}>\n                      Food Searcher provides nutrients data from USDA food central.\n              \n                      Please search food by its name, brand, or cooking style.\n           \n                      e.g. salmon, chicken breast, etc.\n                      </p>\n                  </section>\n                  :\n                  data.map((d, idx) => {\n                    return (\n                      <li key={idx} className=\"data-list__item\" onClick={(e) => {\n                        e.currentTarget.querySelector(\".data-list__item-info\").classList.toggle(\"fold\")\n                      }}>\n                        <div className=\"data-list__item-head\">\n                          <div>{d.description.toLowerCase()}</div>\n                          <i>{d.brandOwner || \"\"}</i>\n                        </div>\n                        <NutrientList\n                          nutrientList={d.foodNutrients}></NutrientList>\n                      </li>\n                    )\n                  }\n                  )}</ul>\n            </div>\n          </div>\n        </main>\n        <footer className=\"row\">\n          <p className=\"col-12\">{String.fromCharCode(169)} 2020 edit by shanpig\n          </p>\n        </footer>\n    </div >\n  );\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register (config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW (swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker (swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister () {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister()\n      })\n      .catch(error => {\n        console.error(error.message)\n      })\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}